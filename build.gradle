plugins {
    id 'com.palantir.docker' version '0.25.0' apply false
    id 'org.jetbrains.kotlin.jvm' version "${kotlin_version}"
    id 'com.github.harbby.gradle.serviceloader' version '1.1.5'
    id "org.owasp.dependencycheck" version "7.2.0"
}

dependencyCheck {
    format='HTML'
    failBuildOnCVSS=5
}

apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'com.palantir.docker'

ext {
    sharedDir = file("${project.rootDir}/shared")
    sailfishVersion = '3.3.11'
    commonVersion   = '3.41.1'
}

group = 'com.exactpro.th2'
version = release_version

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    // ignoreGradleMetadataRedirection is used for sonatype because
    // Sailfish dependencies have constrains that interfere with our BOM
    // so we exclude Gradle metadata for this repositories

    maven {
        name 'Sonatype_snapshots'
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
        content {
            includeModule("com.exactpro.th2", "common")
        }
    }

    maven {
        name 'Sonatype_snapshots'
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
        metadataSources {
            mavenPom()
            artifact()
            ignoreGradleMetadataRedirection()
        }
    }

    maven {
        name 'Sonatype_releases'
        url 'https://s01.oss.sonatype.org/content/repositories/releases/'
        content {
            includeModule("com.exactpro.th2", "common")
        }
    }

    maven {
        name 'Sonatype_releases'
        url 'https://s01.oss.sonatype.org/content/repositories/releases/'
        metadataSources {
            mavenPom()
            artifact()
            ignoreGradleMetadataRedirection()
        }
    }

    mavenCentral {
        content {
            includeModule("com.exactpro.th2", "common")
        }
    }

    mavenCentral {
        metadataSources {
            mavenPom()
            artifact()
        }
    }
    maven {
        name 'MavenLocal'
        url sharedDir
    }

    mavenLocal()

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    }
}

jar {
    manifest {
        attributes(
                'Created-By': "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})",
                'Specification-Title': '',
                'Specification-Vendor': 'Exactpro Systems LLC',
                'Implementation-Title': project.archivesBaseName,
                'Implementation-Vendor': 'Exactpro Systems LLC',
                'Implementation-Vendor-Id': 'com.exactpro',
                'Implementation-Version': project.version
        )
    }
}

dependencies {
    api platform('com.exactpro.th2:bom:4.0.2')

    implementation "com.exactpro.th2:common:${commonVersion}"
    implementation 'com.exactpro.th2:codec:4.7.4'
    implementation 'com.exactpro.th2:sailfish-utils:3.13.0-dev-3204703314-SNAPSHOT'

    implementation "com.exactpro.sf:service-http:${sailfishVersion}"

    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: kotlin_version
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlin_version
    implementation group: 'io.github.microutils', name: 'kotlin-logging', version: '2.0.10'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.0'
    testImplementation group: 'org.jetbrains.kotlin', name: 'kotlin-test-junit5', version: kotlin_version

    testImplementation testFixtures("com.exactpro.th2:common:${commonVersion}")
}

test {
    useJUnitPlatform()
}

application {
    mainClassName 'com.exactpro.th2.codec.MainKt'
}

applicationName = 'service'

distTar {
    archiveName "${applicationName}.tar"
}

dockerPrepare {
    dependsOn distTar
}

docker {
    copySpec.from(tarTree("$buildDir/distributions/${applicationName}.tar"))
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}

serviceLoader {
    serviceInterface 'com.exactpro.th2.codec.api.IPipelineCodecFactory'
}
